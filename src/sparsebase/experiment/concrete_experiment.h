
/*******************************************************
 * Copyright (c) 2022 SparCity, Amro Alabsi Aljundi, Taha Atahan Akyildiz, Arda Sener
 * All rights reserved.
 *
 * This file is distributed under MIT license.
 * The complete license agreement can be obtained at
 * https://sparcityeu.github.io/sparsebase/pages/license.html
 ********************************************************/
#ifndef SPARSEBASE_SPARSEBASE_EXPERIMENT_EXPERIMENT_H_
#define SPARSEBASE_SPARSEBASE_EXPERIMENT_EXPERIMENT_H_

#include "sparsebase/experiment/experiment_type.h"

namespace sparsebase::experiment {

class ConcreteExperiment : public ExperimentType {
    public:
        //! Start the experiment.
        //! Each target will be preprocessed by all the preprocessing functions. Then every kernel will be applied to all of the newly created data.
        //! The cartesian product of the number of _targets, _preprocesses and _kernels iterations will be carried out.
        /*!
         *
         * \param times Specifies the number of samples.
         * \param store_auxiliary determines if the auxiliary data created as a by product of
         * the experiments is going to be stored or not.
         */
        void Run(unsigned int times = 1, bool store_auxiliary = false) override;
        //! Adds a dataLoader to the experiment.
        //! Each target data needs to be loaded to experiment via a LoadDataFunction.
        /*!
         *
         * \param func The function which follows the LoadDataFunction definition.
         * \param targets File paths and file specific parameters.
         */
        void AddDataLoader(LoadDataFunction func, std::vector<std::pair<std::vector<std::string>, std::any>> targets) override;
        //! Adds a preprocessing to the experiment.
        //! Each preprocessing operation is added to experiment via a PreprocessFunction.
        /*!
         *
         * \param id Preprocessing id, used to store results, runtimes and auxiliary data.
         * \param func The function which follows the PreprocessFunction definition.
         */
        void AddPreprocess(std::string id, PreprocessFunction func, std::any params) override;
        //! Adds a kernel to the experiment.
        //! Each kernel is added to experiment via a KernelFunction.
        /*!
         *
         * \param id Kernel ID is used to store results, runtimes and auxiliary data.
         * \param func The function which follows the KernelFunction definition.
         */
        void AddKernel(std::string id, KernelFunction func, std::any params) override;
        //!
        /*!
         *
         * \return Returns the runtimes of each kernel call.
         */
        std::map<std::string, std::vector<double>> GetRunTimes() override;
        //!
        /*!
         *
         * \return Returns the results of each kernel call.
         */
        std::map<std::string, std::vector<std::any>> GetResults() override;
        //!
        /*!
         *
         * \return Returns the auxiliary data stored during the experiment.
         */
        std::map<std::string, std::any> GetAuxiliary() override;
    protected:
        //! Stores the file_paths of the files to be extracted,
        //! along with the file specific parameters attached.
        std::vector<std::vector<std::pair<std::vector<std::string>, std::any>>> targets_;
        //! Stores the kernel functions that are going to be run.
        std::unordered_map<std::string, std::pair<KernelFunction, std::any>> kernels_;
        ////! Stores the kernel params.
        //std::unordered_map<std::string, std::any> _kernel_parameters;
        //! Stores dataLoaders.
        std::vector<LoadDataFunction> dataLoaders_;
        //! Stores preprocesses.
        std::unordered_map<std::string, std::pair<PreprocessFunction, std::any>> preprocesses_;
        //! Stores auxiliary data.
        std::map<std::string, std::any> auxiliary_;
        //! Stores runtimes.
        //! The identifier is generated as a comma delimited string of target,preprocess_id, and kernel_id respectively.
        std::map<std::string, std::vector<double>> runtimes_;
        //! Stores results generated by the kernels.
        //! The identifier is generated as a comma delimited string of target,preprocess_id, and kernel_id respectively.
        std::map<std::string, std::vector<std::any>> results_;
};

} // sparsebase::experiment

#ifdef _HEADER_ONLY
#include "sparsebase/experiment/concrete_experiment.cc"
#endif

#endif